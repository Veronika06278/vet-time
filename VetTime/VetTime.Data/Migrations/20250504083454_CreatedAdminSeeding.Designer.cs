// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VetTime.Data;

#nullable disable

namespace VetTime.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250504083454_CreatedAdminSeeding")]
    partial class CreatedAdminSeeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VetTime.Data.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4de1b74b-9a84-4b00-a70f-178b7956ef32"),
                            CityId = new Guid("e1e9bc98-8d9a-42a9-b07b-9523ff504ab1"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(1618),
                            District = "Lozenets",
                            IsDeleted = false,
                            Number = 16,
                            Street = "Kozyak"
                        });
                });

            modelBuilder.Entity("VetTime.Data.Models.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BreedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("VetTime.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("VeterinarianId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("09d568fa-092d-4fce-968b-37eedbdfdbba"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "96eea271-6799-4aef-9fa0-f5f74d218560",
                            Email = "client@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CLIENT@GMAIL.COM",
                            NormalizedUserName = "CLIENT@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPl7nL6GPQneQA0YDoByLlXs0b5bUvNL+njxpbmpawNhH7Kg2GGaKSV8fnkI96aACg==",
                            PhoneNumber = "0886578436",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5b3e881c-bfe4-43f2-a4d8-e2d28af0293a",
                            TwoFactorEnabled = false,
                            UserName = "client@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("2c80bd0d-c688-4ea3-ab33-9eb542b43b4c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f7b80359-b1e6-45bd-a36d-6e0c540b5a55",
                            Email = "veterinar@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VETERINAR@GMAIL.COM",
                            NormalizedUserName = "VETERINAR@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFzpZxJUFr84CAa768XrHGeYFjoLg2CFMOn78VqWmAjySdNU2oYfDdZbOECOHXhz3w==",
                            PhoneNumber = "0887564962",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1e860808-5c39-42fd-ba4a-e71f2286a26c",
                            TwoFactorEnabled = false,
                            UserName = "veterinar@gmail.com"
                        },
                        new
                        {
                            Id = new Guid("e7cab530-e2f0-418d-9577-dd1b6710c05e"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3ab46a61-5cd2-496e-9542-6a0f15aa2f1b",
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "VETERINAR@GMAIL.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGb+DBiRgRNEY16mEeiUTw/mZvvle/ykxc5Ewsv2J/sc/7BaY5pKdmjo0llXozDONA==",
                            PhoneNumber = "0887698491",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "92120f9e-6bfb-4801-b8d9-d424621f19c7",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        });
                });

            modelBuilder.Entity("VetTime.Data.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AppointmentType")
                        .HasColumnType("int");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasVisited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("ClientId");

                    b.HasIndex("VetId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30ccc388-9956-4f37-bdea-c9c5e466c78c"),
                            AppointmentTime = new DateTime(2025, 4, 28, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            AppointmentType = 0,
                            ClientId = new Guid("b3e77258-dd68-4b24-ae5a-98968d7ec371"),
                            CreatedOn = new DateTime(2025, 4, 27, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            HasVisited = false,
                            IsDeleted = false,
                            VetId = new Guid("e1da8c11-27f5-4a8b-8c22-abec84d1995b")
                        });
                });

            modelBuilder.Entity("VetTime.Data.Models.Breed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BreedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Breeds");
                });

            modelBuilder.Entity("VetTime.Data.Models.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1e9bc98-8d9a-42a9-b07b-9523ff504ab1"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(315),
                            IsDeleted = false,
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = new Guid("1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(327),
                            IsDeleted = false,
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = new Guid("2b3c4d5e-6f7a-8b9c-0d1e-2f3a4b5c6d7e"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(333),
                            IsDeleted = false,
                            Name = "Varna"
                        },
                        new
                        {
                            Id = new Guid("3c4d5e6f-7a8b-9c0d-1e2f-3a4b5c6d7e8f"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(337),
                            IsDeleted = false,
                            Name = "Burgas"
                        },
                        new
                        {
                            Id = new Guid("4d5e6f7a-8b9c-0d1e-2f3a-4b5c6d7e8f9a"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(404),
                            IsDeleted = false,
                            Name = "Ruse"
                        },
                        new
                        {
                            Id = new Guid("5e6f7a8b-9c0d-1e2f-3a4b-5c6d7e8f9a0b"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(430),
                            IsDeleted = false,
                            Name = "Stara Zagora"
                        },
                        new
                        {
                            Id = new Guid("6f7a8b9c-0d1e-2f3a-4b5c-6d7e8f9a0b1c"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(435),
                            IsDeleted = false,
                            Name = "Pleven"
                        },
                        new
                        {
                            Id = new Guid("7a8b9c0d-1e2f-3a4b-5c6d-7e8f9a0b1c2d"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(443),
                            IsDeleted = false,
                            Name = "Sliven"
                        },
                        new
                        {
                            Id = new Guid("8b9c0d1e-2f3a-4b5c-6d7e-8f9a0b1c2d3e"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(447),
                            IsDeleted = false,
                            Name = "Dobrich"
                        },
                        new
                        {
                            Id = new Guid("9c0d1e2f-3a4b-5c6d-7e8f-9a0b1c2d3e4f"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(459),
                            IsDeleted = false,
                            Name = "Shumen"
                        },
                        new
                        {
                            Id = new Guid("0d1e2f3a-4b5c-6d7e-8f9a-0b1c2d3e4f5a"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(462),
                            IsDeleted = false,
                            Name = "Pernik"
                        },
                        new
                        {
                            Id = new Guid("1e2f3a4b-5c6d-7e8f-9a0b-1c2d3e4f5a6b"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(466),
                            IsDeleted = false,
                            Name = "Haskovo"
                        },
                        new
                        {
                            Id = new Guid("2f3a4b5c-6d7e-8f9a-0b1c-2d3e4f5a6b7c"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(470),
                            IsDeleted = false,
                            Name = "Yambol"
                        },
                        new
                        {
                            Id = new Guid("3a4b5c6d-7e8f-9a0b-1c2d-3e4f5a6b7c8d"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(474),
                            IsDeleted = false,
                            Name = "Pazardzhik"
                        },
                        new
                        {
                            Id = new Guid("4b5c6d7e-8f9a-0b1c-2d3e-4f5a6b7c8d9e"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(1106),
                            IsDeleted = false,
                            Name = "Blagoevgrad"
                        },
                        new
                        {
                            Id = new Guid("5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(1131),
                            IsDeleted = false,
                            Name = "Veliko Tarnovo"
                        },
                        new
                        {
                            Id = new Guid("6d7e8f9a-0b1c-2d3e-4f5a-6b7c8d9e0f1a"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(1136),
                            IsDeleted = false,
                            Name = "Vratsa"
                        },
                        new
                        {
                            Id = new Guid("7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(1148),
                            IsDeleted = false,
                            Name = "Gabrovo"
                        },
                        new
                        {
                            Id = new Guid("8f9a0b1c-2d3e-4f5a-6b7c-8d9e0f1a2b3c"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(1152),
                            IsDeleted = false,
                            Name = "Vidin"
                        },
                        new
                        {
                            Id = new Guid("9a0b1c2d-3e4f-5a6b-7c8d-9e0f1a2b3c4d"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(1232),
                            IsDeleted = false,
                            Name = "Kardzhali"
                        },
                        new
                        {
                            Id = new Guid("0b1c2d3e-4f5a-6b7c-8d9e-0f1a2b3c4d5e"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(1238),
                            IsDeleted = false,
                            Name = "Kyustendil"
                        },
                        new
                        {
                            Id = new Guid("1c2d3e4f-5a6b-7c8d-9e0f-1a2b3c4d5e6f"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(1242),
                            IsDeleted = false,
                            Name = "Montana"
                        },
                        new
                        {
                            Id = new Guid("2d3e4f5a-6b7c-8d9e-0f1a-2b3c4d5e6f7a"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(1248),
                            IsDeleted = false,
                            Name = "Lovech"
                        },
                        new
                        {
                            Id = new Guid("3e4f5a6b-7c8d-9e0f-1a2b-3c4d5e6f7a8b"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(1252),
                            IsDeleted = false,
                            Name = "Razgrad"
                        },
                        new
                        {
                            Id = new Guid("4f5a6b7c-8d9e-0f1a-2b3c-4d5e6f7a8b9c"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(1255),
                            IsDeleted = false,
                            Name = "Targovishte"
                        },
                        new
                        {
                            Id = new Guid("5a6b7c8d-9e0f-1a2b-3c4d-5e6f7a8b9c0d"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(1268),
                            IsDeleted = false,
                            Name = "Silistra"
                        },
                        new
                        {
                            Id = new Guid("6b7c8d9e-0f1a-2b3c-4d5e-6f7a8b9c0d1e"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(1282),
                            IsDeleted = false,
                            Name = "Smolyan"
                        });
                });

            modelBuilder.Entity("VetTime.Data.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("NotVisitedCounter")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3e77258-dd68-4b24-ae5a-98968d7ec371"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(50),
                            FirstName = "Nicole",
                            IsDeleted = false,
                            LastName = "Aleksieva",
                            NotVisitedCounter = 0,
                            UserId = new Guid("09d568fa-092d-4fce-968b-37eedbdfdbba")
                        });
                });

            modelBuilder.Entity("VetTime.Data.Models.Rating", b =>
                {
                    b.Property<Guid>("VetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VetId", "ClientId");

                    b.HasIndex("ClientId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("VetTime.Data.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Exotic Animals"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Domestic Animals"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Farm Animals"
                        });
                });

            modelBuilder.Entity("VetTime.Data.Models.VetSpecialization", b =>
                {
                    b.Property<Guid>("VetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("VetId", "Id");

                    b.HasIndex("Id");

                    b.ToTable("VetSpecializations");

                    b.HasData(
                        new
                        {
                            VetId = new Guid("e1da8c11-27f5-4a8b-8c22-abec84d1995b"),
                            Id = 2
                        });
                });

            modelBuilder.Entity("VetTime.Data.Models.Veterinarian", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Veterinarians");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1da8c11-27f5-4a8b-8c22-abec84d1995b"),
                            AddressId = new Guid("4de1b74b-9a84-4b00-a70f-178b7956ef32"),
                            CreatedOn = new DateTime(2025, 5, 4, 11, 34, 50, 704, DateTimeKind.Local).AddTicks(3564),
                            FirstName = "Veronika",
                            IsDeleted = false,
                            LastName = "Zheleva",
                            UserId = new Guid("2c80bd0d-c688-4ea3-ab33-9eb542b43b4c")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("VetTime.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("VetTime.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetTime.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("VetTime.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VetTime.Data.Models.Address", b =>
                {
                    b.HasOne("VetTime.Data.Models.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("VetTime.Data.Models.Animal", b =>
                {
                    b.HasOne("VetTime.Data.Models.Breed", "Breed")
                        .WithMany("Animals")
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetTime.Data.Models.Client", "Client")
                        .WithMany("Animals")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetTime.Data.Models.Specialization", "Specialization")
                        .WithMany("Animals")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breed");

                    b.Navigation("Client");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("VetTime.Data.Models.Appointment", b =>
                {
                    b.HasOne("VetTime.Data.Models.Animal", "Animal")
                        .WithMany()
                        .HasForeignKey("AnimalId");

                    b.HasOne("VetTime.Data.Models.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VetTime.Data.Models.Veterinarian", "Veterinarian")
                        .WithMany("Appointments")
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("Client");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("VetTime.Data.Models.Client", b =>
                {
                    b.HasOne("VetTime.Data.Models.ApplicationUser", "User")
                        .WithOne("Client")
                        .HasForeignKey("VetTime.Data.Models.Client", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VetTime.Data.Models.Rating", b =>
                {
                    b.HasOne("VetTime.Data.Models.Client", "Client")
                        .WithMany("Ratings")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetTime.Data.Models.Veterinarian", "Veterinarian")
                        .WithMany("Ratings")
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("VetTime.Data.Models.VetSpecialization", b =>
                {
                    b.HasOne("VetTime.Data.Models.Specialization", "Specialization")
                        .WithMany("VetSpecializations")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetTime.Data.Models.Veterinarian", "Veterinarian")
                        .WithMany("VetSpecializations")
                        .HasForeignKey("VetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("VetTime.Data.Models.Veterinarian", b =>
                {
                    b.HasOne("VetTime.Data.Models.Address", "Address")
                        .WithMany("Veterinarians")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VetTime.Data.Models.ApplicationUser", "User")
                        .WithOne("Veterinarian")
                        .HasForeignKey("VetTime.Data.Models.Veterinarian", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VetTime.Data.Models.Address", b =>
                {
                    b.Navigation("Veterinarians");
                });

            modelBuilder.Entity("VetTime.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Client");

                    b.Navigation("Veterinarian");
                });

            modelBuilder.Entity("VetTime.Data.Models.Breed", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("VetTime.Data.Models.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("VetTime.Data.Models.Client", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("Appointments");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("VetTime.Data.Models.Specialization", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("VetSpecializations");
                });

            modelBuilder.Entity("VetTime.Data.Models.Veterinarian", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Ratings");

                    b.Navigation("VetSpecializations");
                });
#pragma warning restore 612, 618
        }
    }
}
